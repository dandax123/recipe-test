// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String
  email          String   @unique
  hashedPassword String?
  role           String   @default("USER")

  tokens     Token[]
  sessions   Session[]
  meals      Meal[]    @relation("authorToMeal")
  savedMeals Meal[]    @relation("favoriteToMeal")
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  // See note below about TokenType enum
  // type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

model Meal {
  id          Int        @id @default(autoincrement())
  author      User?      @relation(fields: [authorId], references: [id], name: "authorToMeal")
  authorId    Int?
  favorite    User?      @relation(fields: [favoriteId], references: [id], name: "favoriteToMeal")
  favoriteId  Int?
  title       String
  description String
  cookTime    Int
  image       String
  Recipe      Recipe?    @relation(fields: [recipeId], references: [id])
  recipeId    Int?       @unique
  Category    Category[]
}

model Recipe {
  id          Int                @id @default(autoincrement())
  instruction String[]
  ingredients RecipeIngredient[]
  meal        Meal?
}

model Measures {
  id   Int    @id @default(autoincrement())
  name String @unique

  ingredients RecipeIngredient[]
}

model IngredientNames {
  id          Int                @id @default(autoincrement())
  name        String             @unique
  ingredients RecipeIngredient[]
}

model RecipeIngredient {
  id              Int              @id @default(autoincrement())
  qty             Int
  Recipe          Recipe?          @relation(fields: [recipeId], references: [id])
  recipeId        Int?
  measures        Measures?        @relation(fields: [measuresId], references: [name])
  measuresId      String?
  ingredientNames IngredientNames? @relation(fields: [ingredientName], references: [name])
  ingredientName  String?
}

model Category {
  id    Int    @id @default(autoincrement())
  title String @unique
  Meal  Meal[]
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgresql
// enum TokenType {
//   RESET_PASSWORD
// }
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
